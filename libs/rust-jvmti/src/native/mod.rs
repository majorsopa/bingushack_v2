///
/// The following code in this file has been automatically generated from JVMTI native headers,
/// including jvmti.h and jni.h. This code isn't meant to be used from application code directly,
/// it's purpose is to act as a glue code between native JNI/JVMTI calls and the rust code.
///
/// Some parts have been given more reasonable names but they still reflect the original API.
///
extern crate libc;

use libc::{c_char, c_void, c_uchar};

// Mutable pointer to a JVMTI Environment
pub type JVMTIEnvPtr = *mut jvmti_native::jvmtiEnv;
// Mutable pointer to a JVM Environment
pub type JavaVMPtr = *mut jvmti_native::JavaVM;
// Mutable pointer to a JNI Environment
pub type JNIEnvPtr = *mut jvmti_native::JNIEnv;
/// Standard return value type for JVMTI functions
pub type ReturnValue = jvmti_native::jint;
/// Typed alias to C void *'s
pub type VoidPtr = *mut c_void;
pub type RawString = *const c_char;
pub type MutString = *mut c_char;
pub type MutByteArray = *mut c_uchar;
pub type JavaInstance = jvmti_native::Struct__jobject;
/// Typed alias to pointers to Java objects
pub type JavaObject = *mut JavaInstance;
pub type JavaThread = jvmti_native::jthread;
pub type JavaClass = jvmti_native::jclass;
pub type JavaMethod = jvmti_native::jmethodID;
pub type JavaLong = jvmti_native::jlong;
pub type TagId = jvmti_native::jlong;
pub type JavaVersionNumber = jvmti_native::jint;

#[allow(dead_code)]
#[allow(bad_style)]
pub mod jvmti_native {

    use libc::{c_char, c_uchar, c_short, c_ushort, c_int, c_uint, c_longlong, c_ulonglong, c_long, c_ulong, c_float, c_double, c_void};

    /* automatically generated by rust-bindgen */
    pub type __int8_t = c_char;
    pub type __uint8_t = c_uchar;
    pub type __int16_t = c_short;
    pub type __uint16_t = c_ushort;
    pub type __int32_t = c_int;
    pub type __uint32_t = c_uint;
    pub type __int64_t = c_longlong;
    pub type __uint64_t = c_ulonglong;
    pub type __darwin_intptr_t = c_long;
    pub type __darwin_natural_t = c_uint;
    pub type __darwin_ct_rune_t = c_int;

    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed1 {
        pub _bindgen_data_: [u64; 16usize],
    }
    impl Union_Unnamed1 {
        pub unsafe fn __mbstate8(&mut self) -> *mut [c_char; 128usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn _mbstateL(&mut self) -> *mut c_longlong {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed1 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed1 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __mbstate_t = Union_Unnamed1;
    pub type __darwin_mbstate_t = __mbstate_t;
    pub type __darwin_ptrdiff_t = c_long;
    pub type __darwin_size_t = c_ulong;
    pub type __darwin_va_list = __builtin_va_list;
    pub type __darwin_wchar_t = c_int;
    pub type __darwin_rune_t = __darwin_wchar_t;
    pub type __darwin_wint_t = c_int;
    pub type __darwin_clock_t = c_ulong;
    pub type __darwin_socklen_t = __uint32_t;
    pub type __darwin_ssize_t = c_long;
    pub type __darwin_time_t = c_long;
    pub type __darwin_blkcnt_t = __int64_t;
    pub type __darwin_blksize_t = __int32_t;
    pub type __darwin_dev_t = __int32_t;
    pub type __darwin_fsblkcnt_t = c_uint;
    pub type __darwin_fsfilcnt_t = c_uint;
    pub type __darwin_gid_t = __uint32_t;
    pub type __darwin_id_t = __uint32_t;
    pub type __darwin_ino64_t = __uint64_t;
    pub type __darwin_ino_t = __darwin_ino64_t;
    pub type __darwin_mach_port_name_t = __darwin_natural_t;
    pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
    pub type __darwin_mode_t = __uint16_t;
    pub type __darwin_off_t = __int64_t;
    pub type __darwin_pid_t = __int32_t;
    pub type __darwin_sigset_t = __uint32_t;
    pub type __darwin_suseconds_t = __int32_t;
    pub type __darwin_uid_t = __uint32_t;
    pub type __darwin_useconds_t = __uint32_t;
    pub type __darwin_uuid_t = [c_uchar; 16usize];
    pub type __darwin_uuid_string_t = [c_char; 37usize];

    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___darwin_pthread_handler_rec {
        pub __routine: Option<unsafe extern "C" fn(arg1: *mut c_void) -> ()>,
        pub __arg: *mut c_void,
        pub __next: *mut Struct___darwin_pthread_handler_rec,
    }
    impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_attr_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 56usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_attr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_cond_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 40usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_cond_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_condattr_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 8usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_mutex_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 56usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_mutexattr_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 8usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_once_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 8usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_once_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_rwlock_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 192usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_rwlockattr_t {
        pub __sig: c_long,
        pub __opaque: [c_char; 16usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_t {
        pub __sig: c_long,
        pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
        pub __opaque: [c_char; 8176usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
    pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
    pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
    pub type __darwin_pthread_key_t = c_ulong;
    pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
    pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
    pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
    pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
    pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
    pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
    pub type __darwin_nl_item = c_int;
    pub type __darwin_wctrans_t = c_int;
    pub type __darwin_wctype_t = __uint32_t;
    pub type va_list = __builtin_va_list;
    pub type size_t = __darwin_size_t;
    pub type fpos_t = __darwin_off_t;

    pub type off_t = __darwin_off_t;
    pub type ssize_t = __darwin_ssize_t;
    pub type __gnuc_va_list = __builtin_va_list;
    pub type jint = c_int;
    pub type jlong = c_long;
    pub type jbyte = c_char;
    pub type jboolean = c_uchar;
    pub type jchar = c_ushort;
    pub type jshort = c_short;
    pub type jfloat = c_float;
    pub type jdouble = c_double;
    pub type jsize = jint;
    #[repr(C)]
    pub struct Struct__jobject { pub _hacky_hack_workaround: u32 }
    pub type jobject = *mut Struct__jobject;
    pub type jclass = jobject;
    pub type jthrowable = jobject;
    pub type jstring = jobject;
    pub type jarray = jobject;
    pub type jbooleanArray = jarray;
    pub type jbyteArray = jarray;
    pub type jcharArray = jarray;
    pub type jshortArray = jarray;
    pub type jintArray = jarray;
    pub type jlongArray = jarray;
    pub type jfloatArray = jarray;
    pub type jdoubleArray = jarray;
    pub type jobjectArray = jarray;
    pub type jweak = jobject;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_jvalue {
        pub _bindgen_data_: [u64; 1usize],
    }
    impl Union_jvalue {
        pub unsafe fn z(&mut self) -> *mut jboolean {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn b(&mut self) -> *mut jbyte {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn c(&mut self) -> *mut jchar {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn s(&mut self) -> *mut jshort {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn i(&mut self) -> *mut jint {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn j(&mut self) -> *mut jlong {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn f(&mut self) -> *mut jfloat {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn d(&mut self) -> *mut jdouble {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn l(&mut self) -> *mut jobject {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_jvalue {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_jvalue {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type jvalue = Union_jvalue;
    pub enum Struct__jfieldID { }
    pub type jfieldID = *mut Struct__jfieldID;
    pub enum Struct__jmethodID { }
    pub type jmethodID = *mut Struct__jmethodID;
    pub type Enum__jobjectType = c_uint;
    pub const JNIInvalidRefType: c_uint = 0;
    pub const JNILocalRefType: c_uint = 1;
    pub const JNIGlobalRefType: c_uint = 2;
    pub const JNIWeakGlobalRefType: c_uint = 3;
    pub type jobjectRefType = Enum__jobjectType;

    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed2 {
        pub name: *mut c_char,
        pub signature: *mut c_char,
        pub fnPtr: *mut c_void,
    }
    impl ::std::clone::Clone for Struct_Unnamed2 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed2 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JNINativeMethod = Struct_Unnamed2;
    pub type JNIEnv = *const JNINativeInterface;
    pub type JavaVM = *const JNIInvokeInterface;
    #[repr(C)]
    #[derive(Copy)]
    pub struct JNINativeInterface {
        pub reserved0: *mut c_void,
        pub reserved1: *mut c_void,
        pub reserved2: *mut c_void,
        pub reserved3: *mut c_void,
        pub GetVersion: Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jint>,
        pub DefineClass: Option<unsafe extern "C" fn(env: *mut JNIEnv, name: *const c_char, loader: jobject, buf: *const jbyte, len: jsize) -> jclass>,
        pub FindClass: Option<unsafe extern "C" fn(env: *mut JNIEnv, name: *const c_char) -> jclass>,
        pub FromReflectedMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, method: jobject) -> jmethodID>,
        pub FromReflectedField: Option<unsafe extern "C" fn(env: *mut JNIEnv, field: jobject) -> jfieldID>,
        pub ToReflectedMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, isStatic: jboolean) -> jobject>,
        pub GetSuperclass: Option<unsafe extern "C" fn(env: *mut JNIEnv, sub: jclass) -> jclass>,
        pub IsAssignableFrom: Option<unsafe extern "C" fn(env: *mut JNIEnv, sub: jclass, sup: jclass) -> jboolean>,
        pub ToReflectedField: Option<unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, fieldID: jfieldID, isStatic: jboolean) -> jobject>,
        pub Throw: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jthrowable) -> jint>,
        pub ThrowNew: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, msg: *const c_char) -> jint>,
        pub ExceptionOccurred: Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jthrowable>,
        pub ExceptionDescribe: Option<unsafe extern "C" fn(env: *mut JNIEnv) -> ()>,
        pub ExceptionClear: Option<unsafe extern "C" fn(env: *mut JNIEnv) -> ()>,
        pub FatalError: Option<unsafe extern "C" fn(env: *mut JNIEnv, msg: *const c_char) -> ()>,
        pub PushLocalFrame: Option<unsafe extern "C" fn(env: *mut JNIEnv, capacity: jint) -> jint>,
        pub PopLocalFrame: Option<unsafe extern "C" fn(env: *mut JNIEnv, result: jobject) -> jobject>,
        pub NewGlobalRef: Option<unsafe extern "C" fn(env: *mut JNIEnv, lobj: jobject) -> jobject>,
        pub DeleteGlobalRef: Option<unsafe extern "C" fn(env: *mut JNIEnv, gref: jobject) -> ()>,
        pub DeleteLocalRef: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> ()>,
        pub IsSameObject: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj1: jobject, obj2: jobject) -> jboolean>,
        pub NewLocalRef: Option<unsafe extern "C" fn(env: *mut JNIEnv, _ref: jobject) -> jobject>,
        pub EnsureLocalCapacity: Option<unsafe extern "C" fn(env: *mut JNIEnv, capacity: jint) -> jint>,
        pub AllocObject: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jobject>,
        pub NewObject: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jobject>,
        pub NewObjectV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jobject>,
        pub NewObjectA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jobject>,
        pub GetObjectClass: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jclass>,
        pub IsInstanceOf: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass) -> jboolean>,
        pub GetMethodID: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, name: *const c_char, sig: *const c_char) -> jmethodID>,
        pub CallObjectMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jobject>,
        pub CallObjectMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jobject>,
        pub CallObjectMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jobject>,
        pub CallBooleanMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jboolean>,
        pub CallBooleanMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jboolean>,
        pub CallBooleanMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jboolean>,
        pub CallByteMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jbyte>,
        pub CallByteMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jbyte>,
        pub CallByteMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jbyte>,
        pub CallCharMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jchar>,
        pub CallCharMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jchar>,
        pub CallCharMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jchar>,
        pub CallShortMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jshort>,
        pub CallShortMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jshort>,
        pub CallShortMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jshort>,
        pub CallIntMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jint>,
        pub CallIntMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jint>,
        pub CallIntMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jint>,
        pub CallLongMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jlong>,
        pub CallLongMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jlong>,
        pub CallLongMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jlong>,
        pub CallFloatMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jfloat>,
        pub CallFloatMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jfloat>,
        pub CallFloatMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jfloat>,
        pub CallDoubleMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jdouble>,
        pub CallDoubleMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> jdouble>,
        pub CallDoubleMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> jdouble>,
        pub CallVoidMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> ()>,
        pub CallVoidMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list) -> ()>,
        pub CallVoidMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: *const jvalue) -> ()>,
        pub CallNonvirtualObjectMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jobject>,
        pub CallNonvirtualObjectMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jobject>,
        pub CallNonvirtualObjectMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jobject>,
        pub CallNonvirtualBooleanMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jboolean>,
        pub CallNonvirtualBooleanMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jboolean>,
        pub CallNonvirtualBooleanMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jboolean>,
        pub CallNonvirtualByteMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jbyte>,
        pub CallNonvirtualByteMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jbyte>,
        pub CallNonvirtualByteMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jbyte>,
        pub CallNonvirtualCharMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jchar>,
        pub CallNonvirtualCharMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jchar>,
        pub CallNonvirtualCharMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jchar>,
        pub CallNonvirtualShortMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jshort>,
        pub CallNonvirtualShortMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jshort>,
        pub CallNonvirtualShortMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jshort>,
        pub CallNonvirtualIntMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jint>,
        pub CallNonvirtualIntMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jint>,
        pub CallNonvirtualIntMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jint>,
        pub CallNonvirtualLongMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jlong>,
        pub CallNonvirtualLongMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jlong>,
        pub CallNonvirtualLongMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jlong>,
        pub CallNonvirtualFloatMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jfloat>,
        pub CallNonvirtualFloatMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jfloat>,
        pub CallNonvirtualFloatMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jfloat>,
        pub CallNonvirtualDoubleMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> jdouble>,
        pub CallNonvirtualDoubleMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> jdouble>,
        pub CallNonvirtualDoubleMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jdouble>,
        pub CallNonvirtualVoidMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, ...) -> ()>,
        pub CallNonvirtualVoidMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: va_list) -> ()>,
        pub CallNonvirtualVoidMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> ()>,
        pub GetFieldID: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, name: *const c_char, sig: *const c_char) -> jfieldID>,
        pub GetObjectField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jobject>,
        pub GetBooleanField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jboolean>,
        pub GetByteField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jbyte>,
        pub GetCharField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jchar>,
        pub GetShortField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jshort>,
        pub GetIntField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jint>,
        pub GetLongField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jlong>,
        pub GetFloatField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jfloat>,
        pub GetDoubleField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jdouble>,
        pub SetObjectField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jobject) -> ()>,
        pub SetBooleanField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jboolean) -> ()>,
        pub SetByteField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jbyte) -> ()>,
        pub SetCharField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jchar) -> ()>,
        pub SetShortField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jshort) -> ()>,
        pub SetIntField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jint) -> ()>,
        pub SetLongField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jlong) -> ()>,
        pub SetFloatField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jfloat) -> ()>,
        pub SetDoubleField: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jdouble) -> ()>,
        pub GetStaticMethodID: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, name: *const c_char, sig: *const c_char) -> jmethodID>,
        pub CallStaticObjectMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jobject>,
        pub CallStaticObjectMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jobject>,
        pub CallStaticObjectMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jobject>,
        pub CallStaticBooleanMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jboolean>,
        pub CallStaticBooleanMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jboolean>,
        pub CallStaticBooleanMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jboolean>,
        pub CallStaticByteMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jbyte>,
        pub CallStaticByteMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jbyte>,
        pub CallStaticByteMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jbyte>,
        pub CallStaticCharMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jchar>,
        pub CallStaticCharMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jchar>,
        pub CallStaticCharMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jchar>,
        pub CallStaticShortMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jshort>,
        pub CallStaticShortMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jshort>,
        pub CallStaticShortMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jshort>,
        pub CallStaticIntMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jint>,
        pub CallStaticIntMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jint>,
        pub CallStaticIntMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jint>,
        pub CallStaticLongMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jlong>,
        pub CallStaticLongMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jlong>,
        pub CallStaticLongMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jlong>,
        pub CallStaticFloatMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jfloat>,
        pub CallStaticFloatMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jfloat>,
        pub CallStaticFloatMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jfloat>,
        pub CallStaticDoubleMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jdouble>,
        pub CallStaticDoubleMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: va_list) -> jdouble>,
        pub CallStaticDoubleMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, args: *const jvalue) -> jdouble>,
        pub CallStaticVoidMethod: Option<unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, ...) -> ()>,
        pub CallStaticVoidMethodV: Option<unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, args: va_list) -> ()>,
        pub CallStaticVoidMethodA: Option<unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, args: *const jvalue) -> ()>,
        pub GetStaticFieldID: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, name: *const c_char, sig: *const c_char) -> jfieldID>,
        pub GetStaticObjectField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jobject>,
        pub GetStaticBooleanField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jboolean>,
        pub GetStaticByteField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jbyte>,
        pub GetStaticCharField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jchar>,
        pub GetStaticShortField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jshort>,
        pub GetStaticIntField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jint>,
        pub GetStaticLongField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jlong>,
        pub GetStaticFloatField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jfloat>,
        pub GetStaticDoubleField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jdouble>,
        pub SetStaticObjectField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jobject) -> ()>,
        pub SetStaticBooleanField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jboolean) -> ()>,
        pub SetStaticByteField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jbyte) -> ()>,
        pub SetStaticCharField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jchar) -> ()>,
        pub SetStaticShortField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jshort) -> ()>,
        pub SetStaticIntField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jint) -> ()>,
        pub SetStaticLongField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jlong) -> ()>,
        pub SetStaticFloatField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jfloat) -> ()>,
        pub SetStaticDoubleField: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jdouble) -> ()>,
        pub NewString: Option<unsafe extern "C" fn(env: *mut JNIEnv, unicode: *const jchar, len: jsize) -> jstring>,
        pub GetStringLength: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring) -> jsize>,
        pub GetStringChars: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring, isCopy: *mut jboolean) -> *const jchar>,
        pub ReleaseStringChars: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring, chars: *const jchar) -> ()>,
        pub NewStringUTF: Option<unsafe extern "C" fn(env: *mut JNIEnv, utf: *const c_char) -> jstring>,
        pub GetStringUTFLength: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring) -> jsize>,
        pub GetStringUTFChars: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring, isCopy: *mut jboolean) -> *const c_char>,
        pub ReleaseStringUTFChars: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring, chars: *const c_char) -> ()>,
        pub GetArrayLength: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jarray) -> jsize>,
        pub NewObjectArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize, clazz: jclass, init: jobject) -> jobjectArray>,
        pub GetObjectArrayElement: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jobjectArray, index: jsize) -> jobject>,
        pub SetObjectArrayElement: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jobjectArray, index: jsize, val: jobject) -> ()>,
        pub NewBooleanArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jbooleanArray>,
        pub NewByteArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jbyteArray>,
        pub NewCharArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jcharArray>,
        pub NewShortArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jshortArray>,
        pub NewIntArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jintArray>,
        pub NewLongArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jlongArray>,
        pub NewFloatArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jfloatArray>,
        pub NewDoubleArray: Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jdoubleArray>,
        pub GetBooleanArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbooleanArray, isCopy: *mut jboolean) -> *mut jboolean>,
        pub GetByteArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbyteArray, isCopy: *mut jboolean) -> *mut jbyte>,
        pub GetCharArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jcharArray, isCopy: *mut jboolean) -> *mut jchar>,
        pub GetShortArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jshortArray, isCopy: *mut jboolean) -> *mut jshort>,
        pub GetIntArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jintArray, isCopy: *mut jboolean) -> *mut jint>,
        pub GetLongArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jlongArray, isCopy: *mut jboolean) -> *mut jlong>,
        pub GetFloatArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jfloatArray, isCopy: *mut jboolean) -> *mut jfloat>,
        pub GetDoubleArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jdoubleArray, isCopy: *mut jboolean) -> *mut jdouble>,
        pub ReleaseBooleanArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbooleanArray, elems: *mut jboolean, mode: jint) -> ()>,
        pub ReleaseByteArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbyteArray, elems: *mut jbyte, mode: jint) -> ()>,
        pub ReleaseCharArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jcharArray, elems: *mut jchar, mode: jint) -> ()>,
        pub ReleaseShortArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jshortArray, elems: *mut jshort, mode: jint) -> ()>,
        pub ReleaseIntArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jintArray, elems: *mut jint, mode: jint) -> ()>,
        pub ReleaseLongArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jlongArray, elems: *mut jlong, mode: jint) -> ()>,
        pub ReleaseFloatArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jfloatArray, elems: *mut jfloat, mode: jint) -> ()>,
        pub ReleaseDoubleArrayElements: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jdoubleArray, elems: *mut jdouble, mode: jint) -> ()>,
        pub GetBooleanArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbooleanArray, start: jsize, l: jsize, buf: *mut jboolean) -> ()>,
        pub GetByteArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbyteArray, start: jsize, len: jsize, buf: *mut jbyte) -> ()>,
        pub GetCharArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jcharArray, start: jsize, len: jsize, buf: *mut jchar) -> ()>,
        pub GetShortArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jshortArray, start: jsize, len: jsize, buf: *mut jshort) -> ()>,
        pub GetIntArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jintArray, start: jsize, len: jsize, buf: *mut jint) -> ()>,
        pub GetLongArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jlongArray, start: jsize, len: jsize, buf: *mut jlong) -> ()>,
        pub GetFloatArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jfloatArray, start: jsize, len: jsize, buf: *mut jfloat) -> ()>,
        pub GetDoubleArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jdoubleArray, start: jsize, len: jsize, buf: *mut jdouble) -> ()>,
        pub SetBooleanArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbooleanArray, start: jsize, l: jsize, buf: *const jboolean) -> ()>,
        pub SetByteArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jbyteArray, start: jsize, len: jsize, buf: *const jbyte) -> ()>,
        pub SetCharArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jcharArray, start: jsize, len: jsize, buf: *const jchar) -> ()>,
        pub SetShortArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jshortArray, start: jsize, len: jsize, buf: *const jshort) -> ()>,
        pub SetIntArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jintArray, start: jsize, len: jsize, buf: *const jint) -> ()>,
        pub SetLongArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jlongArray, start: jsize, len: jsize, buf: *const jlong) -> ()>,
        pub SetFloatArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jfloatArray, start: jsize, len: jsize, buf: *const jfloat) -> ()>,
        pub SetDoubleArrayRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jdoubleArray, start: jsize, len: jsize, buf: *const jdouble) -> ()>,
        pub RegisterNatives: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methods: *const JNINativeMethod, nMethods: jint) -> jint>,
        pub UnregisterNatives: Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jint>,
        pub MonitorEnter: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jint>,
        pub MonitorExit: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jint>,
        pub GetJavaVM: Option<unsafe extern "C" fn(env: *mut JNIEnv, vm: *mut *mut JavaVM) -> jint>,
        pub GetStringRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring, start: jsize, len: jsize, buf: *mut jchar) -> ()>,
        pub GetStringUTFRegion: Option<unsafe extern "C" fn(env: *mut JNIEnv, str: jstring, start: jsize, len: jsize, buf: *mut c_char) -> ()>,
        pub GetPrimitiveArrayCritical: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jarray, isCopy: *mut jboolean) -> *mut c_void>,
        pub ReleasePrimitiveArrayCritical: Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jarray, carray: *mut c_void, mode: jint) -> ()>,
        pub GetStringCritical: Option<unsafe extern "C" fn(env: *mut JNIEnv, string: jstring, isCopy: *mut jboolean) -> *const jchar>,
        pub ReleaseStringCritical: Option<unsafe extern "C" fn(env: *mut JNIEnv, string: jstring, cstring: *const jchar) -> ()>,
        pub NewWeakGlobalRef: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jweak>,
        pub DeleteWeakGlobalRef: Option<unsafe extern "C" fn(env: *mut JNIEnv, _ref: jweak) -> ()>,
        pub ExceptionCheck: Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jboolean>,
        pub NewDirectByteBuffer: Option<unsafe extern "C" fn(env: *mut JNIEnv, address: *mut c_void, capacity: jlong) -> jobject>,
        pub GetDirectBufferAddress: Option<unsafe extern "C" fn(env: *mut JNIEnv, buf: jobject) -> *mut c_void>,
        pub GetDirectBufferCapacity: Option<unsafe extern "C" fn(env: *mut JNIEnv, buf: jobject) -> jlong>,
        pub GetObjectRefType: Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jobjectRefType>,
    }
    impl ::std::clone::Clone for JNINativeInterface {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for JNINativeInterface {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JNIEnv_ {
        pub functions: *const JNINativeInterface,
    }
    impl ::std::clone::Clone for Struct_JNIEnv_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JNIEnv_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVMOption {
        pub optionString: *mut c_char,
        pub extraInfo: *mut c_void,
    }
    impl ::std::clone::Clone for Struct_JavaVMOption {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVMOption {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JavaVMOption = Struct_JavaVMOption;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVMInitArgs {
        pub version: jint,
        pub nOptions: jint,
        pub options: *mut JavaVMOption,
        pub ignoreUnrecognized: jboolean,
    }
    impl ::std::clone::Clone for Struct_JavaVMInitArgs {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVMInitArgs {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JavaVMInitArgs = Struct_JavaVMInitArgs;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVMAttachArgs {
        pub version: jint,
        pub name: *mut c_char,
        pub group: jobject,
    }
    impl ::std::clone::Clone for Struct_JavaVMAttachArgs {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVMAttachArgs {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JavaVMAttachArgs = Struct_JavaVMAttachArgs;
    #[repr(C)]
    #[derive(Copy)]
    pub struct JNIInvokeInterface {
        pub reserved0: *mut c_void,
        pub reserved1: *mut c_void,
        pub reserved2: *mut c_void,

        pub DestroyJavaVM: Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
        pub AttachCurrentThread: Option<unsafe extern "C" fn(vm: *mut JavaVM, penv: *mut *mut c_void, args: *mut c_void) -> jint>,
        pub DetachCurrentThread: Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
        pub GetEnv: Option<unsafe extern "C" fn(vm: *mut JavaVM, penv: *mut *mut c_void, version: jint) -> jint>,
        pub AttachCurrentThreadAsDaemon: Option<unsafe extern "C" fn(vm: *mut JavaVM, penv: *mut *mut c_void, args: *mut c_void) -> jint>,
    }
    impl ::std::clone::Clone for JNIInvokeInterface {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for JNIInvokeInterface {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVM_ {
        pub functions: *const JNIInvokeInterface,
    }
    impl ::std::clone::Clone for Struct_JavaVM_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVM_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type Enum_Unnamed3 = c_uint;
    pub const JVMTI_VERSION_1: c_uint = 805371904;
    pub const JVMTI_VERSION_1_0: c_uint = 805371904;
    pub const JVMTI_VERSION_1_1: c_uint = 805372160;
    pub const JVMTI_VERSION_1_2: c_uint = 805372416;
    pub const JVMTI_VERSION: c_int = 805372417;
    pub type jvmtiEnv = *const Struct_jvmtiInterface_1_;
    pub type jthread = jobject;
    pub type jthreadGroup = jobject;
    pub type jlocation = jlong;
    pub enum Struct__jrawMonitorID { }
    pub type jrawMonitorID = *mut Struct__jrawMonitorID;
    pub type jniNativeInterface = JNINativeInterface;
    pub type Enum_Unnamed4 = c_uint;
    pub const JVMTI_THREAD_STATE_ALIVE: c_uint = 1;
    pub const JVMTI_THREAD_STATE_TERMINATED: c_uint = 2;
    pub const JVMTI_THREAD_STATE_RUNNABLE: c_uint = 4;
    pub const JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER: c_uint = 1024;
    pub const JVMTI_THREAD_STATE_WAITING: c_uint = 128;
    pub const JVMTI_THREAD_STATE_WAITING_INDEFINITELY: c_uint = 16;
    pub const JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT: c_uint = 32;
    pub const JVMTI_THREAD_STATE_SLEEPING: c_uint = 64;
    pub const JVMTI_THREAD_STATE_IN_OBJECT_WAIT: c_uint = 256;
    pub const JVMTI_THREAD_STATE_PARKED: c_uint = 512;
    pub const JVMTI_THREAD_STATE_SUSPENDED: c_uint = 1048576;
    pub const JVMTI_THREAD_STATE_INTERRUPTED: c_uint = 2097152;
    pub const JVMTI_THREAD_STATE_IN_NATIVE: c_uint = 4194304;
    pub const JVMTI_THREAD_STATE_VENDOR_1: c_uint = 268435456;
    pub const JVMTI_THREAD_STATE_VENDOR_2: c_uint = 536870912;
    pub const JVMTI_THREAD_STATE_VENDOR_3: c_uint = 1073741824;
    pub type Enum_Unnamed5 = c_uint;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_MASK: c_uint = 1207;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_NEW: c_uint = 0;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED: c_uint = 2;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE: c_uint = 5;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED: c_uint = 1025;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_WAITING: c_uint = 145;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING: c_uint = 161;
    pub type Enum_Unnamed6 = c_uint;
    pub const JVMTI_THREAD_MIN_PRIORITY: c_uint = 1;
    pub const JVMTI_THREAD_NORM_PRIORITY: c_uint = 5;
    pub const JVMTI_THREAD_MAX_PRIORITY: c_uint = 10;
    pub type Enum_Unnamed7 = c_uint;
    pub const JVMTI_HEAP_FILTER_TAGGED: c_uint = 4;
    pub const JVMTI_HEAP_FILTER_UNTAGGED: c_uint = 8;
    pub const JVMTI_HEAP_FILTER_CLASS_TAGGED: c_uint = 16;
    pub const JVMTI_HEAP_FILTER_CLASS_UNTAGGED: c_uint = 32;
    pub type Enum_Unnamed8 = c_uint;
    pub const JVMTI_VISIT_OBJECTS: c_uint = 256;
    pub const JVMTI_VISIT_ABORT: c_uint = 32768;
    pub type Enum_Unnamed9 = c_uint;
    pub const JVMTI_HEAP_REFERENCE_CLASS: c_uint = 1;
    pub const JVMTI_HEAP_REFERENCE_FIELD: c_uint = 2;
    pub const JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT: c_uint = 3;
    pub const JVMTI_HEAP_REFERENCE_CLASS_LOADER: c_uint = 4;
    pub const JVMTI_HEAP_REFERENCE_SIGNERS: c_uint = 5;
    pub const JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN: c_uint = 6;
    pub const JVMTI_HEAP_REFERENCE_INTERFACE: c_uint = 7;
    pub const JVMTI_HEAP_REFERENCE_STATIC_FIELD: c_uint = 8;
    pub const JVMTI_HEAP_REFERENCE_CONSTANT_POOL: c_uint = 9;
    pub const JVMTI_HEAP_REFERENCE_SUPERCLASS: c_uint = 10;
    pub const JVMTI_HEAP_REFERENCE_JNI_GLOBAL: c_uint = 21;
    pub const JVMTI_HEAP_REFERENCE_SYSTEM_CLASS: c_uint = 22;
    pub const JVMTI_HEAP_REFERENCE_MONITOR: c_uint = 23;
    pub const JVMTI_HEAP_REFERENCE_STACK_LOCAL: c_uint = 24;
    pub const JVMTI_HEAP_REFERENCE_JNI_LOCAL: c_uint = 25;
    pub const JVMTI_HEAP_REFERENCE_THREAD: c_uint = 26;
    pub const JVMTI_HEAP_REFERENCE_OTHER: c_uint = 27;
    pub type jvmtiHeapReferenceKind = Enum_Unnamed9;
    pub type Enum_Unnamed10 = c_uint;
    pub const JVMTI_PRIMITIVE_TYPE_BOOLEAN: c_uint = 90;
    pub const JVMTI_PRIMITIVE_TYPE_BYTE: c_uint = 66;
    pub const JVMTI_PRIMITIVE_TYPE_CHAR: c_uint = 67;
    pub const JVMTI_PRIMITIVE_TYPE_SHORT: c_uint = 83;
    pub const JVMTI_PRIMITIVE_TYPE_INT: c_uint = 73;
    pub const JVMTI_PRIMITIVE_TYPE_LONG: c_uint = 74;
    pub const JVMTI_PRIMITIVE_TYPE_FLOAT: c_uint = 70;
    pub const JVMTI_PRIMITIVE_TYPE_DOUBLE: c_uint = 68;
    pub type jvmtiPrimitiveType = Enum_Unnamed10;
    pub type Enum_Unnamed11 = c_uint;
    pub const JVMTI_HEAP_OBJECT_TAGGED: c_uint = 1;
    pub const JVMTI_HEAP_OBJECT_UNTAGGED: c_uint = 2;
    pub const JVMTI_HEAP_OBJECT_EITHER: c_uint = 3;
    pub type jvmtiHeapObjectFilter = Enum_Unnamed11;
    pub type Enum_Unnamed12 = c_uint;
    pub const JVMTI_HEAP_ROOT_JNI_GLOBAL: c_uint = 1;
    pub const JVMTI_HEAP_ROOT_SYSTEM_CLASS: c_uint = 2;
    pub const JVMTI_HEAP_ROOT_MONITOR: c_uint = 3;
    pub const JVMTI_HEAP_ROOT_STACK_LOCAL: c_uint = 4;
    pub const JVMTI_HEAP_ROOT_JNI_LOCAL: c_uint = 5;
    pub const JVMTI_HEAP_ROOT_THREAD: c_uint = 6;
    pub const JVMTI_HEAP_ROOT_OTHER: c_uint = 7;
    pub type jvmtiHeapRootKind = Enum_Unnamed12;
    pub type Enum_Unnamed13 = c_uint;
    pub const JVMTI_REFERENCE_CLASS: c_uint = 1;
    pub const JVMTI_REFERENCE_FIELD: c_uint = 2;
    pub const JVMTI_REFERENCE_ARRAY_ELEMENT: c_uint = 3;
    pub const JVMTI_REFERENCE_CLASS_LOADER: c_uint = 4;
    pub const JVMTI_REFERENCE_SIGNERS: c_uint = 5;
    pub const JVMTI_REFERENCE_PROTECTION_DOMAIN: c_uint = 6;
    pub const JVMTI_REFERENCE_INTERFACE: c_uint = 7;
    pub const JVMTI_REFERENCE_STATIC_FIELD: c_uint = 8;
    pub const JVMTI_REFERENCE_CONSTANT_POOL: c_uint = 9;
    pub type jvmtiObjectReferenceKind = Enum_Unnamed13;
    pub type Enum_Unnamed14 = c_uint;
    pub const JVMTI_ITERATION_CONTINUE: c_uint = 1;
    pub const JVMTI_ITERATION_IGNORE: c_uint = 2;
    pub const JVMTI_ITERATION_ABORT: c_uint = 0;
    pub type jvmtiIterationControl = Enum_Unnamed14;
    pub type Enum_Unnamed15 = c_uint;
    pub const JVMTI_CLASS_STATUS_VERIFIED: c_uint = 1;
    pub const JVMTI_CLASS_STATUS_PREPARED: c_uint = 2;
    pub const JVMTI_CLASS_STATUS_INITIALIZED: c_uint = 4;
    pub const JVMTI_CLASS_STATUS_ERROR: c_uint = 8;
    pub const JVMTI_CLASS_STATUS_ARRAY: c_uint = 16;
    pub const JVMTI_CLASS_STATUS_PRIMITIVE: c_uint = 32;
    pub type Enum_Unnamed16 = c_uint;
    pub const JVMTI_ENABLE: c_uint = 1;
    pub const JVMTI_DISABLE: c_uint = 0;
    pub type jvmtiEventMode = Enum_Unnamed16;
    pub type Enum_Unnamed17 = c_uint;
    pub const JVMTI_TYPE_JBYTE: c_uint = 101;
    pub const JVMTI_TYPE_JCHAR: c_uint = 102;
    pub const JVMTI_TYPE_JSHORT: c_uint = 103;
    pub const JVMTI_TYPE_JINT: c_uint = 104;
    pub const JVMTI_TYPE_JLONG: c_uint = 105;
    pub const JVMTI_TYPE_JFLOAT: c_uint = 106;
    pub const JVMTI_TYPE_JDOUBLE: c_uint = 107;
    pub const JVMTI_TYPE_JBOOLEAN: c_uint = 108;
    pub const JVMTI_TYPE_JOBJECT: c_uint = 109;
    pub const JVMTI_TYPE_JTHREAD: c_uint = 110;
    pub const JVMTI_TYPE_JCLASS: c_uint = 111;
    pub const JVMTI_TYPE_JVALUE: c_uint = 112;
    pub const JVMTI_TYPE_JFIELDID: c_uint = 113;
    pub const JVMTI_TYPE_JMETHODID: c_uint = 114;
    pub const JVMTI_TYPE_CCHAR: c_uint = 115;
    pub const JVMTI_TYPE_CVOID: c_uint = 116;
    pub const JVMTI_TYPE_JNIENV: c_uint = 117;
    pub type jvmtiParamTypes = Enum_Unnamed17;
    pub type Enum_Unnamed18 = c_uint;
    pub const JVMTI_KIND_IN: c_uint = 91;
    pub const JVMTI_KIND_IN_PTR: c_uint = 92;
    pub const JVMTI_KIND_IN_BUF: c_uint = 93;
    pub const JVMTI_KIND_ALLOC_BUF: c_uint = 94;
    pub const JVMTI_KIND_ALLOC_ALLOC_BUF: c_uint = 95;
    pub const JVMTI_KIND_OUT: c_uint = 96;
    pub const JVMTI_KIND_OUT_BUF: c_uint = 97;
    pub type jvmtiParamKind = Enum_Unnamed18;
    pub type Enum_Unnamed19 = c_uint;
    pub const JVMTI_TIMER_USER_CPU: c_uint = 30;
    pub const JVMTI_TIMER_TOTAL_CPU: c_uint = 31;
    pub const JVMTI_TIMER_ELAPSED: c_uint = 32;
    pub type jvmtiTimerKind = Enum_Unnamed19;
    pub type Enum_Unnamed20 = c_uint;
    pub const JVMTI_PHASE_ONLOAD: c_uint = 1;
    pub const JVMTI_PHASE_PRIMORDIAL: c_uint = 2;
    pub const JVMTI_PHASE_START: c_uint = 6;
    pub const JVMTI_PHASE_LIVE: c_uint = 4;
    pub const JVMTI_PHASE_DEAD: c_uint = 8;
    pub type jvmtiPhase = Enum_Unnamed20;
    pub type Enum_Unnamed21 = c_uint;
    pub const JVMTI_VERSION_INTERFACE_JNI: c_uint = 0;
    pub const JVMTI_VERSION_INTERFACE_JVMTI: c_uint = 805306368;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed22 = c_uint;
    pub const JVMTI_VERSION_MASK_INTERFACE_TYPE: c_uint = 1879048192;
    pub const JVMTI_VERSION_MASK_MAJOR: c_uint = 268369920;
    pub const JVMTI_VERSION_MASK_MINOR: c_uint = 65280;
    pub const JVMTI_VERSION_MASK_MICRO: c_uint = 255;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed23 = c_uint;
    pub const JVMTI_VERSION_SHIFT_MAJOR: c_uint = 16;
    pub const JVMTI_VERSION_SHIFT_MINOR: c_uint = 8;
    pub const JVMTI_VERSION_SHIFT_MICRO: c_uint = 0;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed24 = c_uint;
    pub const JVMTI_VERBOSE_OTHER: c_uint = 0;
    pub const JVMTI_VERBOSE_GC: c_uint = 1;
    pub const JVMTI_VERBOSE_CLASS: c_uint = 2;
    pub const JVMTI_VERBOSE_JNI: c_uint = 4;
    #[allow(non_camel_case_types)]
    pub type jvmtiVerboseFlag = Enum_Unnamed24;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed25 = c_uint;
    pub const JVMTI_JLOCATION_JVMBCI: c_uint = 1;
    pub const JVMTI_JLOCATION_MACHINEPC: c_uint = 2;
    pub const JVMTI_JLOCATION_OTHER: c_uint = 0;
    #[allow(non_camel_case_types)]
    pub type jvmtiJlocationFormat = Enum_Unnamed25;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed26 = c_uint;
    pub const JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR: c_uint = 1;
    pub const JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP: c_uint = 2;
    pub const JVMTI_RESOURCE_EXHAUSTED_THREADS: c_uint = 4;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed27 = c_uint;
    pub const JVMTI_ERROR_NONE: c_uint = 0;
    pub const JVMTI_ERROR_INVALID_THREAD: c_uint = 10;
    pub const JVMTI_ERROR_INVALID_THREAD_GROUP: c_uint = 11;
    pub const JVMTI_ERROR_INVALID_PRIORITY: c_uint = 12;
    pub const JVMTI_ERROR_THREAD_NOT_SUSPENDED: c_uint = 13;
    pub const JVMTI_ERROR_THREAD_SUSPENDED: c_uint = 14;
    pub const JVMTI_ERROR_THREAD_NOT_ALIVE: c_uint = 15;
    pub const JVMTI_ERROR_INVALID_OBJECT: c_uint = 20;
    pub const JVMTI_ERROR_INVALID_CLASS: c_uint = 21;
    pub const JVMTI_ERROR_CLASS_NOT_PREPARED: c_uint = 22;
    pub const JVMTI_ERROR_INVALID_METHODID: c_uint = 23;
    pub const JVMTI_ERROR_INVALID_LOCATION: c_uint = 24;
    pub const JVMTI_ERROR_INVALID_FIELDID: c_uint = 25;
    pub const JVMTI_ERROR_NO_MORE_FRAMES: c_uint = 31;
    pub const JVMTI_ERROR_OPAQUE_FRAME: c_uint = 32;
    pub const JVMTI_ERROR_TYPE_MISMATCH: c_uint = 34;
    pub const JVMTI_ERROR_INVALID_SLOT: c_uint = 35;
    pub const JVMTI_ERROR_DUPLICATE: c_uint = 40;
    pub const JVMTI_ERROR_NOT_FOUND: c_uint = 41;
    pub const JVMTI_ERROR_INVALID_MONITOR: c_uint = 50;
    pub const JVMTI_ERROR_NOT_MONITOR_OWNER: c_uint = 51;
    pub const JVMTI_ERROR_INTERRUPT: c_uint = 52;
    pub const JVMTI_ERROR_INVALID_CLASS_FORMAT: c_uint = 60;
    pub const JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION: c_uint = 61;
    pub const JVMTI_ERROR_FAILS_VERIFICATION: c_uint = 62;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED: c_uint = 63;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED: c_uint = 64;
    pub const JVMTI_ERROR_INVALID_TYPESTATE: c_uint = 65;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED: c_uint = 66;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED: c_uint = 67;
    pub const JVMTI_ERROR_UNSUPPORTED_VERSION: c_uint = 68;
    pub const JVMTI_ERROR_NAMES_DONT_MATCH: c_uint = 69;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED: c_uint = 70;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED: c_uint = 71;
    pub const JVMTI_ERROR_UNMODIFIABLE_CLASS: c_uint = 79;
    pub const JVMTI_ERROR_NOT_AVAILABLE: c_uint = 98;
    pub const JVMTI_ERROR_MUST_POSSESS_CAPABILITY: c_uint = 99;
    pub const JVMTI_ERROR_NULL_POINTER: c_uint = 100;
    pub const JVMTI_ERROR_ABSENT_INFORMATION: c_uint = 101;
    pub const JVMTI_ERROR_INVALID_EVENT_TYPE: c_uint = 102;
    pub const JVMTI_ERROR_ILLEGAL_ARGUMENT: c_uint = 103;
    pub const JVMTI_ERROR_NATIVE_METHOD: c_uint = 104;
    pub const JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED: c_uint = 106;
    pub const JVMTI_ERROR_OUT_OF_MEMORY: c_uint = 110;
    pub const JVMTI_ERROR_ACCESS_DENIED: c_uint = 111;
    pub const JVMTI_ERROR_WRONG_PHASE: c_uint = 112;
    pub const JVMTI_ERROR_INTERNAL: c_uint = 113;
    pub const JVMTI_ERROR_UNATTACHED_THREAD: c_uint = 115;
    pub const JVMTI_ERROR_INVALID_ENVIRONMENT: c_uint = 116;
    pub const JVMTI_ERROR_MAX: c_uint = 116;
    #[allow(non_camel_case_types)]
    pub type jvmtiError = Enum_Unnamed27;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed28 = c_uint;
    pub const JVMTI_MIN_EVENT_TYPE_VAL: c_uint = 50;
    pub const JVMTI_EVENT_VM_INIT: c_uint = 50;
    pub const JVMTI_EVENT_VM_DEATH: c_uint = 51;
    pub const JVMTI_EVENT_THREAD_START: c_uint = 52;
    pub const JVMTI_EVENT_THREAD_END: c_uint = 53;
    pub const JVMTI_EVENT_CLASS_FILE_LOAD_HOOK: c_uint = 54;
    pub const JVMTI_EVENT_CLASS_LOAD: c_uint = 55;
    pub const JVMTI_EVENT_CLASS_PREPARE: c_uint = 56;
    pub const JVMTI_EVENT_VM_START: c_uint = 57;
    pub const JVMTI_EVENT_EXCEPTION: c_uint = 58;
    pub const JVMTI_EVENT_EXCEPTION_CATCH: c_uint = 59;
    pub const JVMTI_EVENT_SINGLE_STEP: c_uint = 60;
    pub const JVMTI_EVENT_FRAME_POP: c_uint = 61;
    pub const JVMTI_EVENT_BREAKPOINT: c_uint = 62;
    pub const JVMTI_EVENT_FIELD_ACCESS: c_uint = 63;
    pub const JVMTI_EVENT_FIELD_MODIFICATION: c_uint = 64;
    pub const JVMTI_EVENT_METHOD_ENTRY: c_uint = 65;
    pub const JVMTI_EVENT_METHOD_EXIT: c_uint = 66;
    pub const JVMTI_EVENT_NATIVE_METHOD_BIND: c_uint = 67;
    pub const JVMTI_EVENT_COMPILED_METHOD_LOAD: c_uint = 68;
    pub const JVMTI_EVENT_COMPILED_METHOD_UNLOAD: c_uint = 69;
    pub const JVMTI_EVENT_DYNAMIC_CODE_GENERATED: c_uint = 70;
    pub const JVMTI_EVENT_DATA_DUMP_REQUEST: c_uint = 71;
    pub const JVMTI_EVENT_MONITOR_WAIT: c_uint = 73;
    pub const JVMTI_EVENT_MONITOR_WAITED: c_uint = 74;
    pub const JVMTI_EVENT_MONITOR_CONTENDED_ENTER: c_uint = 75;
    pub const JVMTI_EVENT_MONITOR_CONTENDED_ENTERED: c_uint = 76;
    pub const JVMTI_EVENT_RESOURCE_EXHAUSTED: c_uint = 80;
    pub const JVMTI_EVENT_GARBAGE_COLLECTION_START: c_uint = 81;
    pub const JVMTI_EVENT_GARBAGE_COLLECTION_FINISH: c_uint = 82;
    pub const JVMTI_EVENT_OBJECT_FREE: c_uint = 83;
    pub const JVMTI_EVENT_VM_OBJECT_ALLOC: c_uint = 84;
    pub const JVMTI_MAX_EVENT_TYPE_VAL: c_uint = 84;
    #[allow(non_camel_case_types)]
    pub type jvmtiEvent = Enum_Unnamed28;
    #[allow(non_camel_case_types)]
    pub type jvmtiThreadInfo = Struct__jvmtiThreadInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiMonitorStackDepthInfo = Struct__jvmtiMonitorStackDepthInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiThreadGroupInfo = Struct__jvmtiThreadGroupInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiFrameInfo = Struct__jvmtiFrameInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiStackInfo = Struct__jvmtiStackInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoField = Struct__jvmtiHeapReferenceInfoField;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoArray = Struct__jvmtiHeapReferenceInfoArray;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoConstantPool = Struct__jvmtiHeapReferenceInfoConstantPool;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoStackLocal = Struct__jvmtiHeapReferenceInfoStackLocal;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoJniLocal = Struct__jvmtiHeapReferenceInfoJniLocal;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoReserved = Struct__jvmtiHeapReferenceInfoReserved;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfo = Union__jvmtiHeapReferenceInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapCallbacks = Struct__jvmtiHeapCallbacks;
    #[allow(non_camel_case_types)]
    pub type jvmtiClassDefinition = Struct__jvmtiClassDefinition;
    #[allow(non_camel_case_types)]
    pub type jvmtiMonitorUsage = Struct__jvmtiMonitorUsage;
    #[allow(non_camel_case_types)]
    pub type jvmtiLineNumberEntry = Struct__jvmtiLineNumberEntry;
    #[allow(non_camel_case_types)]
    pub type jvmtiLocalVariableEntry = Struct__jvmtiLocalVariableEntry;
    #[allow(non_camel_case_types)]
    pub type jvmtiParamInfo = Struct__jvmtiParamInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionFunctionInfo = Struct__jvmtiExtensionFunctionInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionEventInfo = Struct__jvmtiExtensionEventInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiTimerInfo = Struct__jvmtiTimerInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiAddrLocationMap = Struct__jvmtiAddrLocationMap;
    #[allow(non_camel_case_types)]
    pub type jvmtiStartFunction =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, arg: *mut c_void) -> ()>; #[allow(non_camel_case_types)]
    pub type jvmtiHeapIterationCallback =
        Option<unsafe extern "C" fn(class_tag: jlong, size: jlong, tag_ptr: *mut jlong, length: jint, user_data: *mut c_void) -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceCallback =
        Option<unsafe extern "C" fn(reference_kind: jvmtiHeapReferenceKind, reference_info: *const jvmtiHeapReferenceInfo, class_tag: jlong,
                                                   referrer_class_tag: jlong, size: jlong, tag_ptr: *mut jlong, referrer_tag_ptr: *mut jlong, length: jint,
                                                   user_data: *mut c_void) -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiPrimitiveFieldCallback =
        Option<unsafe extern "C" fn(kind: jvmtiHeapReferenceKind, info: *const jvmtiHeapReferenceInfo, object_class_tag: jlong,
                                                   object_tag_ptr: *mut jlong, value: jvalue, value_type: jvmtiPrimitiveType,
                                                   user_data: *mut c_void) -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiArrayPrimitiveValueCallback =
        Option<unsafe extern "C" fn(class_tag: jlong, size: jlong, tag_ptr: *mut jlong, element_count: jint, element_type: jvmtiPrimitiveType,
                                                   elements: *const c_void, user_data: *mut c_void) -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiStringPrimitiveValueCallback =
        Option<unsafe extern "C" fn(class_tag: jlong, size: jlong, tag_ptr: *mut jlong, value: *const jchar, value_length: jint,
                                                   user_data: *mut c_void) -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiReservedCallback =
        Option<extern "C" fn() -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapObjectCallback =
        Option<unsafe extern "C" fn(class_tag: jlong, size: jlong, tag_ptr: *mut jlong, user_data: *mut c_void) -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapRootCallback =
        Option<unsafe extern "C" fn(root_kind: jvmtiHeapRootKind, class_tag: jlong, size: jlong, tag_ptr: *mut jlong,
                                                   user_data: *mut c_void) -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiStackReferenceCallback =
        Option<unsafe extern "C" fn(root_kind: jvmtiHeapRootKind, class_tag: jlong, size: jlong, tag_ptr: *mut jlong, thread_tag: jlong,
                                                   depth: jint, method: jmethodID, slot: jint, user_data: *mut c_void) -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiObjectReferenceCallback =
        Option<unsafe extern "C" fn(reference_kind: jvmtiObjectReferenceKind, class_tag: jlong, size: jlong, tag_ptr: *mut jlong,
                                                   referrer_tag: jlong, referrer_index: jint, user_data: *mut c_void) -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionFunction =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...) -> jvmtiError>;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionEvent =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...) -> ()>;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiThreadInfo {
        pub name: *mut c_char,
        pub priority: jint,
        pub is_daemon: jboolean,
        pub thread_group: jthreadGroup,
        pub context_class_loader: jobject,
    }
    impl ::std::clone::Clone for Struct__jvmtiThreadInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiThreadInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiMonitorStackDepthInfo {
        pub monitor: jobject,
        pub stack_depth: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiMonitorStackDepthInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiMonitorStackDepthInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiThreadGroupInfo {
        pub parent: jthreadGroup,
        pub name: *mut c_char,
        pub max_priority: jint,
        pub is_daemon: jboolean,
    }
    impl ::std::clone::Clone for Struct__jvmtiThreadGroupInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiThreadGroupInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiFrameInfo {
        pub method: jmethodID,
        pub location: jlocation,
    }
    impl ::std::clone::Clone for Struct__jvmtiFrameInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiFrameInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiStackInfo {
        pub thread: jthread,
        pub state: jint,
        pub frame_buffer: *mut jvmtiFrameInfo,
        pub frame_count: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiStackInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiStackInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoField {
        pub index: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoField {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoField {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoArray {
        pub index: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoArray {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoArray {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoConstantPool {
        pub index: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoConstantPool {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoConstantPool {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoStackLocal {
        pub thread_tag: jlong,
        pub thread_id: jlong,
        pub depth: jint,
        pub method: jmethodID,
        pub location: jlocation,
        pub slot: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoStackLocal {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoStackLocal {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoJniLocal {
        pub thread_tag: jlong,
        pub thread_id: jlong,
        pub depth: jint,
        pub method: jmethodID,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoJniLocal {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoJniLocal {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoReserved {
        pub reserved1: jlong,
        pub reserved2: jlong,
        pub reserved3: jlong,
        pub reserved4: jlong,
        pub reserved5: jlong,
        pub reserved6: jlong,
        pub reserved7: jlong,
        pub reserved8: jlong,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoReserved {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoReserved {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union__jvmtiHeapReferenceInfo {
        pub _bindgen_data_: [u64; 8usize],
    }
    impl Union__jvmtiHeapReferenceInfo {
        pub unsafe fn field(&mut self) -> *mut jvmtiHeapReferenceInfoField {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn array(&mut self) -> *mut jvmtiHeapReferenceInfoArray {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn constant_pool(&mut self)
         -> *mut jvmtiHeapReferenceInfoConstantPool {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn stack_local(&mut self)
         -> *mut jvmtiHeapReferenceInfoStackLocal {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn jni_local(&mut self)
         -> *mut jvmtiHeapReferenceInfoJniLocal {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn other(&mut self) -> *mut jvmtiHeapReferenceInfoReserved {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union__jvmtiHeapReferenceInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union__jvmtiHeapReferenceInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapCallbacks {
        pub heap_iteration_callback: jvmtiHeapIterationCallback,
        pub heap_reference_callback: jvmtiHeapReferenceCallback,
        pub primitive_field_callback: jvmtiPrimitiveFieldCallback,
        pub array_primitive_value_callback: jvmtiArrayPrimitiveValueCallback,
        pub string_primitive_value_callback: jvmtiStringPrimitiveValueCallback,
        pub reserved5: jvmtiReservedCallback,
        pub reserved6: jvmtiReservedCallback,
        pub reserved7: jvmtiReservedCallback,
        pub reserved8: jvmtiReservedCallback,
        pub reserved9: jvmtiReservedCallback,
        pub reserved10: jvmtiReservedCallback,
        pub reserved11: jvmtiReservedCallback,
        pub reserved12: jvmtiReservedCallback,
        pub reserved13: jvmtiReservedCallback,
        pub reserved14: jvmtiReservedCallback,
        pub reserved15: jvmtiReservedCallback,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapCallbacks {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapCallbacks {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiClassDefinition {
        pub klass: jclass,
        pub class_byte_count: jint,
        pub class_bytes: *const c_uchar,
    }
    impl ::std::clone::Clone for Struct__jvmtiClassDefinition {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiClassDefinition {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiMonitorUsage {
        pub owner: jthread,
        pub entry_count: jint,
        pub waiter_count: jint,
        pub waiters: *mut jthread,
        pub notify_waiter_count: jint,
        pub notify_waiters: *mut jthread,
    }
    impl ::std::clone::Clone for Struct__jvmtiMonitorUsage {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiMonitorUsage {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiLineNumberEntry {
        pub start_location: jlocation,
        pub line_number: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiLineNumberEntry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiLineNumberEntry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiLocalVariableEntry {
        pub start_location: jlocation,
        pub length: jint,
        pub name: *mut c_char,
        pub signature: *mut c_char,
        pub generic_signature: *mut c_char,
        pub slot: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiLocalVariableEntry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiLocalVariableEntry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiParamInfo {
        pub name: *mut c_char,
        pub kind: jvmtiParamKind,
        pub base_type: jvmtiParamTypes,
        pub null_ok: jboolean,
    }
    impl ::std::clone::Clone for Struct__jvmtiParamInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiParamInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiExtensionFunctionInfo {
        pub func: jvmtiExtensionFunction,
        pub id: *mut c_char,
        pub short_description: *mut c_char,
        pub param_count: jint,
        pub params: *mut jvmtiParamInfo,
        pub error_count: jint,
        pub errors: *mut jvmtiError,
    }
    impl ::std::clone::Clone for Struct__jvmtiExtensionFunctionInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiExtensionFunctionInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiExtensionEventInfo {
        pub extension_event_index: jint,
        pub id: *mut c_char,
        pub short_description: *mut c_char,
        pub param_count: jint,
        pub params: *mut jvmtiParamInfo,
    }
    impl ::std::clone::Clone for Struct__jvmtiExtensionEventInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiExtensionEventInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiTimerInfo {
        pub max_value: jlong,
        pub may_skip_forward: jboolean,
        pub may_skip_backward: jboolean,
        pub kind: jvmtiTimerKind,
        pub reserved1: jlong,
        pub reserved2: jlong,
    }
    impl ::std::clone::Clone for Struct__jvmtiTimerInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiTimerInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiAddrLocationMap {
        pub start_address: *const c_void,
        pub location: jlocation,
    }
    impl ::std::clone::Clone for Struct__jvmtiAddrLocationMap {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiAddrLocationMap {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed29 {
        pub _bindgen_bitfield_1_: c_uint,
        pub _bindgen_bitfield_2_: c_uint,
        pub _bindgen_bitfield_3_: c_uint,
        pub _bindgen_bitfield_4_: c_uint,
    }
    impl ::std::clone::Clone for Struct_Unnamed29 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed29 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type jvmtiCapabilities = Struct_Unnamed29;
    pub type jvmtiEventReserved = Option<extern "C" fn() -> ()>;
    pub type jvmtiEventBreakpoint =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation) -> ()>;
    pub type jvmtiEventClassFileLoadHook =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   class_being_redefined: jclass,
                                                   loader: jobject,
                                                   name: *const c_char,
                                                   protection_domain: jobject,
                                                   class_data_len: jint,
                                                   class_data:
                                                       *const c_uchar,
                                                   new_class_data_len: *mut jint,
                                                   new_class_data:
                                                       *mut *mut c_uchar)
                                  -> ()>;
    pub type jvmtiEventClassLoad =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread, klass: jclass)
                                  -> ()>;
    pub type jvmtiEventClassPrepare =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread, klass: jclass)
                                  -> ()>;
    pub type jvmtiEventCompiledMethodLoad =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   method: jmethodID,
                                                   code_size: jint,
                                                   code_addr:
                                                       *const c_void,
                                                   map_length: jint,
                                                   map:
                                                       *const jvmtiAddrLocationMap,
                                                   compile_info:
                                                       *const c_void)
                                  -> ()>;
    pub type jvmtiEventCompiledMethodUnload =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   method: jmethodID,
                                                   code_addr:
                                                       *const c_void)
                                  -> ()>;
    pub type jvmtiEventDataDumpRequest =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)
                                  -> ()>;
    pub type jvmtiEventDynamicCodeGenerated =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   name: *const c_char,
                                                   address: *const c_void,
                                                   length: jint) -> ()>;
    pub type jvmtiEventException =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   exception: jobject,
                                                   catch_method: jmethodID,
                                                   catch_location: jlocation)
                                  -> ()>;
    pub type jvmtiEventExceptionCatch =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   exception: jobject) -> ()>;
    pub type jvmtiEventFieldAccess =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   field_klass: jclass,
                                                   object: jobject,
                                                   field: jfieldID) -> ()>;
    pub type jvmtiEventFieldModification =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   field_klass: jclass,
                                                   object: jobject,
                                                   field: jfieldID,
                                                   signature_type: c_char,
                                                   new_value: jvalue) -> ()>;
    pub type jvmtiEventFramePop =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   was_popped_by_exception:
                                                       jboolean) -> ()>;
    pub type jvmtiEventGarbageCollectionFinish =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)
                                  -> ()>;
    pub type jvmtiEventGarbageCollectionStart =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)
                                  -> ()>;
    pub type jvmtiEventMethodEntry =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID) -> ()>;
    pub type jvmtiEventMethodExit =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   was_popped_by_exception:
                                                       jboolean,
                                                   return_value: jvalue) -> ()>;
    pub type jvmtiEventMonitorContendedEnter =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject) -> ()>;
    pub type jvmtiEventMonitorContendedEntered =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject) -> ()>;
    pub type jvmtiEventMonitorWait =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject,
                                                   timeout: jlong) -> ()>;
    pub type jvmtiEventMonitorWaited =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject,
                                                   timed_out: jboolean) -> ()>;
    pub type jvmtiEventNativeMethodBind =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   address: *mut c_void,
                                                   new_address_ptr:
                                                       *mut *mut c_void)
                                  -> ()>;
    pub type jvmtiEventObjectFree =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   tag: jlong) -> ()>;
    pub type jvmtiEventResourceExhausted =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   flags: jint,
                                                   reserved:
                                                       *const c_void,
                                                   description:
                                                       *const c_char)
                                  -> ()>;
    pub type jvmtiEventSingleStep =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation) -> ()>;
    pub type jvmtiEventThreadEnd =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread) -> ()>;
    pub type jvmtiEventThreadStart =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread) -> ()>;
    pub type jvmtiEventVMDeath =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv) -> ()>;
    pub type jvmtiEventVMInit =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread) -> ()>;
    pub type jvmtiEventVMObjectAlloc =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject,
                                                   object_klass: jclass,
                                                   size: jlong) -> ()>;
    pub type jvmtiEventVMStart =
        Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv) -> ()>;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed30 {
        pub VMInit: jvmtiEventVMInit,
        pub VMDeath: jvmtiEventVMDeath,
        pub ThreadStart: jvmtiEventThreadStart,
        pub ThreadEnd: jvmtiEventThreadEnd,
        pub ClassFileLoadHook: jvmtiEventClassFileLoadHook,
        pub ClassLoad: jvmtiEventClassLoad,
        pub ClassPrepare: jvmtiEventClassPrepare,
        pub VMStart: jvmtiEventVMStart,
        pub Exception: jvmtiEventException,
        pub ExceptionCatch: jvmtiEventExceptionCatch,
        pub SingleStep: jvmtiEventSingleStep,
        pub FramePop: jvmtiEventFramePop,
        pub Breakpoint: jvmtiEventBreakpoint,
        pub FieldAccess: jvmtiEventFieldAccess,
        pub FieldModification: jvmtiEventFieldModification,
        pub MethodEntry: jvmtiEventMethodEntry,
        pub MethodExit: jvmtiEventMethodExit,
        pub NativeMethodBind: jvmtiEventNativeMethodBind,
        pub CompiledMethodLoad: jvmtiEventCompiledMethodLoad,
        pub CompiledMethodUnload: jvmtiEventCompiledMethodUnload,
        pub DynamicCodeGenerated: jvmtiEventDynamicCodeGenerated,
        pub DataDumpRequest: jvmtiEventDataDumpRequest,
        pub reserved72: jvmtiEventReserved,
        pub MonitorWait: jvmtiEventMonitorWait,
        pub MonitorWaited: jvmtiEventMonitorWaited,
        pub MonitorContendedEnter: jvmtiEventMonitorContendedEnter,
        pub MonitorContendedEntered: jvmtiEventMonitorContendedEntered,
        pub reserved77: jvmtiEventReserved,
        pub reserved78: jvmtiEventReserved,
        pub reserved79: jvmtiEventReserved,
        pub ResourceExhausted: jvmtiEventResourceExhausted,
        pub GarbageCollectionStart: jvmtiEventGarbageCollectionStart,
        pub GarbageCollectionFinish: jvmtiEventGarbageCollectionFinish,
        pub ObjectFree: jvmtiEventObjectFree,
        pub VMObjectAlloc: jvmtiEventVMObjectAlloc,
    }
    impl ::std::clone::Clone for Struct_Unnamed30 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed30 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    pub type jvmtiEventCallbacks = Struct_Unnamed30;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_jvmtiInterface_1_ {
        pub reserved1: *mut c_void,
        pub SetEventNotificationMode: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, mode: jvmtiEventMode, event_type: jvmtiEvent, event_thread: jthread, ...) -> jvmtiError>,
        pub reserved3: *mut c_void,
        pub GetAllThreads: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, threads_count_ptr: *mut jint, threads_ptr: *mut *mut jthread) -> jvmtiError>,
        pub SuspendThread: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError>,
        pub ResumeThread: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError>,
        pub StopThread: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, exception: jobject) -> jvmtiError>,
        pub InterruptThread: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError>,
        pub GetThreadInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, info_ptr: *mut jvmtiThreadInfo) -> jvmtiError>,
        pub GetOwnedMonitorInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, owned_monitor_count_ptr: *mut jint, owned_monitors_ptr: *mut *mut jobject) -> jvmtiError>,
        pub GetCurrentContendedMonitor: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, monitor_ptr: *mut jobject) -> jvmtiError>,
        pub RunAgentThread: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, _proc: jvmtiStartFunction, arg: *const c_void, priority: jint) -> jvmtiError>,
        pub GetTopThreadGroups: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, group_count_ptr: *mut jint, groups_ptr: *mut *mut jthreadGroup) -> jvmtiError>,
        pub GetThreadGroupInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, group: jthreadGroup, info_ptr: *mut jvmtiThreadGroupInfo) -> jvmtiError>,
        pub GetThreadGroupChildren: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, group: jthreadGroup, thread_count_ptr: *mut jint, threads_ptr: *mut *mut jthread, group_count_ptr: *mut jint, groups_ptr: *mut *mut jthreadGroup) -> jvmtiError>,
        pub GetFrameCount: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, count_ptr: *mut jint) -> jvmtiError>,
        pub GetThreadState: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, thread_state_ptr: *mut jint) -> jvmtiError>,
        pub GetCurrentThread: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread_ptr: *mut jthread) -> jvmtiError>,
        pub GetFrameLocation: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, method_ptr: *mut jmethodID, location_ptr: *mut jlocation) -> jvmtiError>,
        pub NotifyFramePop: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint) -> jvmtiError>,
        pub GetLocalObject: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value_ptr: *mut jobject) -> jvmtiError>,
        pub GetLocalInt: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value_ptr: *mut jint) -> jvmtiError>,
        pub GetLocalLong: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value_ptr: *mut jlong) -> jvmtiError>,
        pub GetLocalFloat: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value_ptr: *mut jfloat) -> jvmtiError>,
        pub GetLocalDouble: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value_ptr: *mut jdouble) -> jvmtiError>,
        pub SetLocalObject: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value: jobject) -> jvmtiError>,
        pub SetLocalInt: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value: jint) -> jvmtiError>,
        pub SetLocalLong: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value: jlong) -> jvmtiError>,
        pub SetLocalFloat: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value: jfloat) -> jvmtiError>,
        pub SetLocalDouble: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, slot: jint, value: jdouble) -> jvmtiError>,
        pub CreateRawMonitor: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, name: *const c_char, monitor_ptr: *mut jrawMonitorID) -> jvmtiError>,
        pub DestroyRawMonitor: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError>,
        pub RawMonitorEnter: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError>,
        pub RawMonitorExit: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError>,
        pub RawMonitorWait: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID, millis: jlong) -> jvmtiError>,
        pub RawMonitorNotify: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError>,
        pub RawMonitorNotifyAll: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError>,
        pub SetBreakpoint: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, location: jlocation) -> jvmtiError>,
        pub ClearBreakpoint: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, location: jlocation) -> jvmtiError>,
        pub reserved40: *mut c_void,
        pub SetFieldAccessWatch: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError>,
        pub ClearFieldAccessWatch: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError>,
        pub SetFieldModificationWatch: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError>,
        pub ClearFieldModificationWatch: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError>,
        pub IsModifiableClass: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, is_modifiable_class_ptr: *mut jboolean) -> jvmtiError>,
        pub Allocate: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, size: jlong, mem_ptr: *mut *mut c_uchar) -> jvmtiError>,
        pub Deallocate: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, mem: *mut c_uchar) -> jvmtiError>,
        pub GetClassSignature: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, signature_ptr: *mut *mut c_char, generic_ptr: *mut *mut c_char) -> jvmtiError>,
        pub GetClassStatus: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, status_ptr: *mut jint) -> jvmtiError>,
        pub GetSourceFileName: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, source_name_ptr: *mut *mut c_char) -> jvmtiError>,
        pub GetClassModifiers: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, modifiers_ptr: *mut jint) -> jvmtiError>,
        pub GetClassMethods: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, method_count_ptr: *mut jint, methods_ptr: *mut *mut jmethodID) -> jvmtiError>,
        pub GetClassFields: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field_count_ptr: *mut jint, fields_ptr: *mut *mut jfieldID) -> jvmtiError>,
        pub GetImplementedInterfaces: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, interface_count_ptr: *mut jint, interfaces_ptr: *mut *mut jclass) -> jvmtiError>,
        pub IsInterface: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, is_interface_ptr: *mut jboolean) -> jvmtiError>,
        pub IsArrayClass: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, is_array_class_ptr: *mut jboolean) -> jvmtiError>,
        pub GetClassLoader: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, classloader_ptr: *mut jobject) -> jvmtiError>,
        pub GetObjectHashCode: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, hash_code_ptr: *mut jint) -> jvmtiError>,
        pub GetObjectMonitorUsage: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, info_ptr: *mut jvmtiMonitorUsage) -> jvmtiError>,
        pub GetFieldName: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID, name_ptr: *mut *mut c_char, signature_ptr: *mut *mut c_char, generic_ptr: *mut *mut c_char) -> jvmtiError>,
        pub GetFieldDeclaringClass: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID, declaring_class_ptr: *mut jclass) -> jvmtiError>,
        pub GetFieldModifiers: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID, modifiers_ptr: *mut jint) -> jvmtiError>,
        pub IsFieldSynthetic: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID, is_synthetic_ptr: *mut jboolean) -> jvmtiError>,
        pub GetMethodName: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, name_ptr: *mut *mut c_char, signature_ptr: *mut *mut c_char, generic_ptr: *mut *mut c_char) -> jvmtiError>,
        pub GetMethodDeclaringClass: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, declaring_class_ptr: *mut jclass) -> jvmtiError>,
        pub GetMethodModifiers: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, modifiers_ptr: *mut jint) -> jvmtiError>,
        pub reserved67: *mut c_void,
        pub GetMaxLocals: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, max_ptr: *mut jint) -> jvmtiError>,
        pub GetArgumentsSize: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, size_ptr: *mut jint) -> jvmtiError>,
        pub GetLineNumberTable: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, entry_count_ptr: *mut jint, table_ptr: *mut *mut jvmtiLineNumberEntry) -> jvmtiError>,
        pub GetMethodLocation: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, start_location_ptr: *mut jlocation, end_location_ptr: *mut jlocation) -> jvmtiError>,
        pub GetLocalVariableTable: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, entry_count_ptr: *mut jint, table_ptr: *mut *mut jvmtiLocalVariableEntry) -> jvmtiError>,
        pub SetNativeMethodPrefix: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, prefix: *const c_char) -> jvmtiError>,
        pub SetNativeMethodPrefixes: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, prefix_count: jint, prefixes: *mut *mut c_char) -> jvmtiError>,
        pub GetBytecodes: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, bytecode_count_ptr: *mut jint, bytecodes_ptr: *mut *mut c_uchar) -> jvmtiError>,
        pub IsMethodNative: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, is_native_ptr: *mut jboolean) -> jvmtiError>,
        pub IsMethodSynthetic: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, is_synthetic_ptr: *mut jboolean) -> jvmtiError>,
        pub GetLoadedClasses: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, class_count_ptr: *mut jint, classes_ptr: *mut *mut jclass) -> jvmtiError>,
        pub GetClassLoaderClasses: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, initiating_loader: jobject, class_count_ptr: *mut jint, classes_ptr: *mut *mut jclass) -> jvmtiError>,
        pub PopFrame: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError>,
        pub ForceEarlyReturnObject: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jobject) -> jvmtiError>,
        pub ForceEarlyReturnInt: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jint) -> jvmtiError>,
        pub ForceEarlyReturnLong: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jlong) -> jvmtiError>,
        pub ForceEarlyReturnFloat: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jfloat) -> jvmtiError>,
        pub ForceEarlyReturnDouble: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jdouble) -> jvmtiError>,
        pub ForceEarlyReturnVoid: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError>,
        pub RedefineClasses: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, class_count: jint, class_definitions: *const jvmtiClassDefinition) -> jvmtiError>,
        pub GetVersionNumber: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, version_ptr: *mut jint) -> jvmtiError>,
        pub GetCapabilities: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, capabilities_ptr: *mut jvmtiCapabilities) -> jvmtiError>,
        pub GetSourceDebugExtension: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, source_debug_extension_ptr: *mut *mut c_char) -> jvmtiError>,
        pub IsMethodObsolete: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, method: jmethodID, is_obsolete_ptr: *mut jboolean) -> jvmtiError>,
        pub SuspendThreadList: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, request_count: jint, request_list: *const jthread, results: *mut jvmtiError) -> jvmtiError>,
        pub ResumeThreadList: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, request_count: jint, request_list: *const jthread, results: *mut jvmtiError) -> jvmtiError>,
        pub reserved94: *mut c_void,
        pub reserved95: *mut c_void,
        pub reserved96: *mut c_void,
        pub reserved97: *mut c_void,
        pub reserved98: *mut c_void,
        pub reserved99: *mut c_void,
        pub GetAllStackTraces: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, max_frame_count: jint, stack_info_ptr: *mut *mut jvmtiStackInfo, thread_count_ptr: *mut jint) -> jvmtiError>,
        pub GetThreadListStackTraces: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread_count: jint, thread_list: *const jthread, max_frame_count: jint, stack_info_ptr: *mut *mut jvmtiStackInfo) -> jvmtiError>,
        pub GetThreadLocalStorage: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, data_ptr: *mut *mut c_void) -> jvmtiError>,
        pub SetThreadLocalStorage: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, data: *const c_void) -> jvmtiError>,
        pub GetStackTrace: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, start_depth: jint, max_frame_count: jint, frame_buffer: *mut jvmtiFrameInfo, count_ptr: *mut jint) -> jvmtiError>,
        pub reserved105: *mut c_void,
        pub GetTag: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, tag_ptr: *mut jlong) -> jvmtiError>,
        pub SetTag: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, tag: jlong) -> jvmtiError>,
        pub ForceGarbageCollection: Option<unsafe extern "C" fn(env: *mut jvmtiEnv) -> jvmtiError>,
        pub IterateOverObjectsReachableFromObject: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, object_reference_callback: jvmtiObjectReferenceCallback, user_data: *const c_void) -> jvmtiError>,
        pub IterateOverReachableObjects: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, heap_root_callback: jvmtiHeapRootCallback, stack_ref_callback: jvmtiStackReferenceCallback, object_ref_callback: jvmtiObjectReferenceCallback, user_data: *const c_void) -> jvmtiError>,
        pub IterateOverHeap: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object_filter: jvmtiHeapObjectFilter, heap_object_callback: jvmtiHeapObjectCallback, user_data: *const c_void) -> jvmtiError>,
        pub IterateOverInstancesOfClass: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, object_filter: jvmtiHeapObjectFilter, heap_object_callback: jvmtiHeapObjectCallback, user_data: *const c_void) -> jvmtiError>,
        pub reserved113: *mut c_void,
        pub GetObjectsWithTags: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, tag_count: jint, tags: *const jlong, count_ptr: *mut jint, object_result_ptr: *mut *mut jobject, tag_result_ptr: *mut *mut jlong) -> jvmtiError>,
        pub FollowReferences: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, heap_filter: jint, klass: jclass, initial_object: jobject, callbacks: *const jvmtiHeapCallbacks, user_data: *const c_void) -> jvmtiError>,
        pub IterateThroughHeap: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, heap_filter: jint, klass: jclass, callbacks: *const jvmtiHeapCallbacks, user_data: *const c_void) -> jvmtiError>,
        pub reserved117: *mut c_void,
        pub reserved118: *mut c_void,
        pub reserved119: *mut c_void,
        pub SetJNIFunctionTable: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, function_table: *const jniNativeInterface) -> jvmtiError>,
        pub GetJNIFunctionTable: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, function_table: *mut *mut jniNativeInterface) -> jvmtiError>,
        pub SetEventCallbacks: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, callbacks: *const jvmtiEventCallbacks, size_of_callbacks: jint) -> jvmtiError>,
        pub GenerateEvents: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, event_type: jvmtiEvent) -> jvmtiError>,
        pub GetExtensionFunctions: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, extension_count_ptr: *mut jint, extensions: *mut *mut jvmtiExtensionFunctionInfo) -> jvmtiError>,
        pub GetExtensionEvents: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, extension_count_ptr: *mut jint, extensions: *mut *mut jvmtiExtensionEventInfo) -> jvmtiError>,
        pub SetExtensionEventCallback: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, extension_event_index: jint, callback: jvmtiExtensionEvent) -> jvmtiError>,
        pub DisposeEnvironment: Option<unsafe extern "C" fn(env: *mut jvmtiEnv) -> jvmtiError>,
        pub GetErrorName: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, error: jvmtiError, name_ptr: *mut *mut c_char) -> jvmtiError>,
        pub GetJLocationFormat: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, format_ptr: *mut jvmtiJlocationFormat) -> jvmtiError>,
        pub GetSystemProperties: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, count_ptr: *mut jint, property_ptr: *mut *mut *mut c_char) -> jvmtiError>,
        pub GetSystemProperty: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, property: *const c_char, value_ptr: *mut *mut c_char) -> jvmtiError>,
        pub SetSystemProperty: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, property: *const c_char, value: *const c_char) -> jvmtiError>,
        pub GetPhase: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, phase_ptr: *mut jvmtiPhase) -> jvmtiError>,
        pub GetCurrentThreadCpuTimerInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError>,
        pub GetCurrentThreadCpuTime: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, nanos_ptr: *mut jlong) -> jvmtiError>,
        pub GetThreadCpuTimerInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError>,
        pub GetThreadCpuTime: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, nanos_ptr: *mut jlong) -> jvmtiError>,
        pub GetTimerInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError>,
        pub GetTime: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, nanos_ptr: *mut jlong) -> jvmtiError>,
        pub GetPotentialCapabilities: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, capabilities_ptr: *mut jvmtiCapabilities) -> jvmtiError>,
        pub reserved141: *mut c_void,
        pub AddCapabilities: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, capabilities_ptr: *const jvmtiCapabilities) -> jvmtiError>,
        pub RelinquishCapabilities: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, capabilities_ptr: *const jvmtiCapabilities) -> jvmtiError>,
        pub GetAvailableProcessors: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, processor_count_ptr: *mut jint) -> jvmtiError>,
        pub GetClassVersionNumbers: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, minor_version_ptr: *mut jint, major_version_ptr: *mut jint) -> jvmtiError>,
        pub GetConstantPool: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, constant_pool_count_ptr: *mut jint, constant_pool_byte_count_ptr: *mut jint, constant_pool_bytes_ptr: *mut *mut c_uchar) -> jvmtiError>,
        pub GetEnvironmentLocalStorage: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, data_ptr: *mut *mut c_void) -> jvmtiError>,
        pub SetEnvironmentLocalStorage: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, data: *const c_void) -> jvmtiError>,
        pub AddToBootstrapClassLoaderSearch: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, segment: *const c_char) -> jvmtiError>,
        pub SetVerboseFlag: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, flag: jvmtiVerboseFlag, value: jboolean) -> jvmtiError>,
        pub AddToSystemClassLoaderSearch: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, segment: *const c_char) -> jvmtiError>,
        pub RetransformClasses: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, class_count: jint, classes: *const jclass) -> jvmtiError>,
        pub GetOwnedMonitorStackDepthInfo: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, monitor_info_count_ptr: *mut jint, monitor_info_ptr: *mut *mut jvmtiMonitorStackDepthInfo) -> jvmtiError>,
        pub GetObjectSize: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, size_ptr: *mut jlong) -> jvmtiError>,
        pub GetLocalInstance: Option<unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint, value_ptr: *mut jobject) -> jvmtiError>,
    }
    impl ::std::clone::Clone for Struct_jvmtiInterface_1_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_jvmtiInterface_1_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    #[allow(non_camel_case_types)]
    pub type jvmtiInterface_1 = Struct_jvmtiInterface_1_;

    #[repr(C)]
    #[derive(Copy)]
    #[allow(bad_style)]
    pub struct Struct__jvmtiEnv {
        pub functions: *const Struct_jvmtiInterface_1_,
    }
    impl ::std::clone::Clone for Struct__jvmtiEnv {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiEnv {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    pub type __builtin_va_list = [__va_list_tag; 1usize];

    pub type __va_list_tag = Struct___va_list_tag;

    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___va_list_tag {
        pub gp_offset: c_uint,
        pub fp_offset: c_uint,
        pub overflow_arg_area: *mut c_void,
        pub reg_save_area: *mut c_void,
    }
    impl ::std::clone::Clone for Struct___va_list_tag {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___va_list_tag {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    #[allow(non_snake_case)]
    extern "C" {
        pub fn JNI_GetDefaultJavaVMInitArgs(args: *mut c_void) -> jint;
        pub fn JNI_CreateJavaVM(pvm: *mut *mut JavaVM, penv: *mut *mut c_void, args: *mut c_void) -> jint;
        pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize, arg3: *mut jsize) -> jint;
        pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut c_void) -> jint;
        pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut c_void) -> ();
        //pub fn Agent_OnLoad(vm: *mut JavaVM, options: *mut c_char, reserved: *mut c_void) -> jint;
        pub fn Agent_OnAttach(vm: *mut JavaVM, options: *mut c_char, reserved: *mut c_void) -> jint;
        //pub fn Agent_OnUnload(vm: *mut JavaVM) -> ();
    }
}
